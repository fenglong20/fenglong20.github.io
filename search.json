[{"title":"Hello World","url":"/2021/10/19/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"start","url":"/2021/10/19/start/","content":"github page + hexo + action自动部署\n使用github page提供的静态页面，仿照完成了hexo keep主题的博客部署，使用了github action自动化部署。reference\ngithub多账号的管理 参考\n\n准备条件\n两个仓库: public 的仓库用户名.github.io和private的仓库，名称任意\n\n本地电脑先安装node.js软件，我是通过zip解压包安装的，主要区别是需要手动配置环境变量。\n\n在解压后的目录内新建两个目录node-global和node-cache用来保存环境。 \n（系统or用户）环境变量PATH，将解压后的目录以及node-global目录加到PATH中。\n如果一切顺利，在控制台执行node -v和npm -v有输出。\n配置使用淘宝源，并安装hexo，速度飞起  npm config set registry https://registry.npm.taobao.orgnpm config set prefix &quot;E:\\node-v14.18.1-win-x64\\node-global&quot;npm config set cache &quot;E:\\node-v14.18.1-win-x64\\node-cache&quot;npm install -g hexo\n\n\ngitbash安装。并配置好ssh，（公钥放在github，私钥保存在本地），并申请一个有repo和workflow权限的Settings &gt; Developer settings &gt; Personal access tokens，这个添加到private仓库的settings &gt; secrets &gt; Actions secrets / New secret的name为ACTIONS_DEPLOY_KEY在自动化部署的时候有用。\n\n~/.ssh/config文件\n Host fenglong20.github.com    HostName github.com    IdentityFile ~/.ssh/fenglong20\n测试 ssh -T git@fenglong20.github.com\n\n网速可能不稳定。可能要代理\n\n如果之前配置过，需取消global\n git config --global --unset user.namegit config --global --unset user.email\n设置每个项目repo目录里自己的邮箱和用户名\n git config  user.email &quot;常用邮箱&quot;git config  user.name &quot;github用户名&quot;\n修改仓库的地址\n git push origin master #推送时使用\n开始实施\n\n\n新建目录，然后打开目录，使用 hexo init来初始化，然后下载我们需要的主题 git clone https://github.com/XPoet/hexo-theme-keep themes/keep（下载完可以删除.git目录防止后面作怪）\n\n初始化git，添加私有仓库的地址\ngit init#移除git remote rm origin #添加为config中定义的hostgit remote add origin git@fenglong20.github.com:fenglong20/push_blog.git \n先push上去看行不行 git push origin master\n\n接着改主题配置，可参考，添加github action自动化部署修改大目录下的_config.yml文件，修改和添加\ntheme: keepdeploy:  type: git  repository: git@github.com:fenglong20/fenglong20.github.io.git\n新建 .github\\workflows\\hexo-deploy.yml文件，内容为：\nname: deploying Hexo project to GitHub pageson:  push:    branches:      - master # master 分支有 push 行为时就触发这个 actionjobs:  build-and-deploy:    runs-on: ubuntu-latest    steps:      - name: Checkout        uses: actions/checkout@master            - name: Build and Deploy        uses: theme-keep/hexo-deploy-github-pages-action@master # 使用专门部署 Hexo 到 GitHub pages 的 action        env:          PERSONAL_TOKEN: $&#123;&#123; secrets.ACTIONS_DEPLOY_KEY &#125;&#125; # secret 名          PUBLISH_REPOSITORY: fenglong20/fenglong20.github.io # 公共仓库，格式：GitHub 用户名/仓库名          BRANCH: gh-pages # 分支，填 gh-pages 就行          PUBLISH_DIR: ./public # 部署 public 目录下的文件\n总结不显示的问题很多，可以去网页版action里面看日志。这样说来，自动化部署还是很有意思。\n\n\n"}]